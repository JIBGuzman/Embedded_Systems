#include <stdint.h> // C99 data types
#include "tm4c123gh6pm.h"

// Port A RESET --> PA5
#define GPIO_PORTA_DATA_R     (*((volatile unsigned long *)0x400043FC))
#define GPIO_PORTA_DIR_R      (*((volatile unsigned long *)0x40004400))
#define GPIO_PORTA_AFSEL_R    (*((volatile unsigned long *)0x40004420))
#define GPIO_PORTA_PUR_R      (*((volatile unsigned long *)0x40004510))
#define GPIO_PORTA_DEN_R      (*((volatile unsigned long *)0x4000451C))
#define GPIO_PORTA_CR_R       (*((volatile unsigned long *)0x40004524))
#define GPIO_PORTA_AMSEL_R    (*((volatile unsigned long *)0x40004528))
#define GPIO_PORTA_PCTL_R     (*((volatile unsigned long *)0x4000452C))

// PORT F RESET Interrupt
#define GPIO_PORTA_IS_R			  (*((volatile unsigned long *)0x40004404))
#define GPIO_PORTA_IBE_R			(*((volatile unsigned long *)0x40004408))
#define GPIO_PORTA_IM_R			  (*((volatile unsigned long *)0x40004410))
#define GPIO_PORTA_ICR_R			(*((volatile unsigned long *)0x4000441C))
	
// Port F SENSOR --> PF2-PF1
#define GPIO_PORTF_DATA_R     (*((volatile unsigned long *)0x400253FC))
#define GPIO_PORTF_DIR_R      (*((volatile unsigned long *)0x40025400))
#define GPIO_PORTF_AFSEL_R    (*((volatile unsigned long *)0x40025420))
#define GPIO_PORTF_PUR_R      (*((volatile unsigned long *)0x40025510))
#define GPIO_PORTF_DEN_R      (*((volatile unsigned long *)0x4002551C))
#define GPIO_PORTF_CR_R       (*((volatile unsigned long *)0x40025524))
#define GPIO_PORTF_AMSEL_R    (*((volatile unsigned long *)0x40025528))
#define GPIO_PORTF_PCTL_R     (*((volatile unsigned long *)0x4002552C))
// PORT F SENSOR Interrupt
#define GPIO_PORTF_IS_R			  (*((volatile unsigned long *)0x40025404))
#define GPIO_PORTF_IBE_R			(*((volatile unsigned long *)0x40025408))
#define GPIO_PORTF_IM_R			  (*((volatile unsigned long *)0x40025410))
#define GPIO_PORTF_ICR_R			(*((volatile unsigned long *)0x4002541C))

// Port B LED --> PB7-PB0
#define GPIO_PORTB_DATA_R     (*((volatile unsigned long *)0x400053FC))
#define GPIO_PORTB_DIR_R      (*((volatile unsigned long *)0x40005400))
#define GPIO_PORTB_AFSEL_R    (*((volatile unsigned long *)0x40005420))
#define GPIO_PORTB_PUR_R      (*((volatile unsigned long *)0x40005510))
#define GPIO_PORTB_DEN_R      (*((volatile unsigned long *)0x4000551C))
#define GPIO_PORTB_CR_R       (*((volatile unsigned long *)0x40005524))
#define GPIO_PORTB_AMSEL_R    (*((volatile unsigned long *)0x40005528))
#define GPIO_PORTB_PCTL_R     (*((volatile unsigned long *)0x4000552C))

// Define interrupts
#define NVIC_ST_CTRL_R        (*((volatile unsigned long *)0xE000E010))
#define NVIC_ST_RELOAD_R			(*((volatile unsigned long *)0xE000E014))
#define NVIC_ST_CURRENT_R     (*((volatile unsigned long *)0xE000E018))
#define NVIC_SYS_PRI3_R       (*((volatile unsigned long *)0xE000ED20))
#define NVIC_EN0_R            (*((volatile unsigned long *)0xE000E100)) 
#define NVIC_PR10_R           (*((volatile unsigned long *)0xE000E400))
#define NVIC_PRI1_R						(*((volatile unsigned long *)0xE000E404))
#define SYSCTL_RCGC2_R        (*((volatile unsigned long *)0x400FE108))

// Input/Output Definitions
#define RESET									(*((volatile unsigned long *)0x40004080)) //Reset Button  -- portA, PA5
#define SENSOR								(*((volatile unsigned long *)0x4002501C)) //2 Sensors 		-- portF, PF2-PF1
#define LED										(*((volatile unsigned long *)0x400053FC)) //8 LEDS 				-- portB, PB7-PB0

// State Logic
#define initialize  0
#define waitS 			1
#define countY1 		2
#define countY2 		3
#define go 					4
#define falseSL 		5
#define falseSR 		6
#define falseBoth 	7
#define winL 				8
#define winR 				9
#define winBoth 		10

// Function Prototypes (from startup.s)
void DisableInterrupts(); // Disable interrupts
void EnableInterrupts();  // Enable interrupts
void WaitForInterrupt();  // Go to low power mode while waiting for the next interrupt

// Function Prototypes
void PortA_RESET_Init(void);									// Initialize Port A Reset
void PortF_SENSOR_Init(void);     						// Initialize Port F Sensors
void PortB_LED_Init(void);										// Initialize Port B LEDs

void GPIOPortA_Handler(void);									// Handle GPIO Port A interrupts (Reset)
void GPIOPortF_Handler(void); 								// Handle GPIO Port F interrupts (Sensor)

void SysTick_Init(unsigned long period);      // Initialize SysTick timer for 0.1s delay with interrupt enabled
void SysTick_Handler(void);   								// Handle SysTick generated interrupts

struct State {
		unsigned long Out;
		unsigned long Time;
		unsigned long Next[4];
};
typedef const struct State STyp;

STyp FSM[11] = {
	{0xFF, 600, {waitS, waitS, waitS, waitS}}, //Initial state
	{0x00, 200, {waitS, waitS, waitS, countY1}}, //Wait for staging
	{0x11, 800, {falseBoth, falseSL, falseSR, countY2}}, // Countdown Y1
	{0x22, 200, {falseBoth, falseSL, falseSR, go}}, //Countdown Y2
	{0x44, 600, {winBoth, winL, winR, go}}, //Go
	{0x08, 200, {waitS, waitS, waitS, waitS}}, //False start left
	{0x80, 200, {waitS, waitS, waitS, waitS}}, //False start right
	{0x88, 200, {waitS, waitS, waitS, waitS}}, //False start both
	{0x04, 200, {waitS, waitS, waitS, waitS}}, //Win left
	{0x40, 200, {waitS, waitS, waitS, waitS}}, //Win right
	{0x44, 200, {waitS, waitS, waitS, waitS}} //Win both
};

unsigned long CS;
unsigned long Input;
// Initialize Port A Reset PA5
void PortA_RESET_Init(void) { volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x00000001; 			// activate port A
	delay = SYSCTL_RCGC2_R; 						// delay
	GPIO_PORTA_DIR_R |= 0x00; 					// set direction as INPUT PA5 (i.e, set DIR = 0 for an input)
	GPIO_PORTA_AFSEL_R &= 0x20; 				// disable alternate function on PA5
	GPIO_PORTA_DEN_R |= 0x20; 					// digital enable PA5
	GPIO_PORTA_PCTL_R &= ~0x00F00000; 	// set PA5 as GPIO
	GPIO_PORTA_AMSEL_R &= ~0x20; 				// disable analog PA5
}

// Initialize Port F Sensors PF2, PF1
void PortF_SENSOR_Init(void) { volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x00000020; 			// activate port F
	delay = SYSCTL_RCGC2_R; 						// delay
	GPIO_PORTF_DIR_R |= 0x00; 					// set direction as INPUT PF2-1 (i.e, set DIR = 0 for an input)
	GPIO_PORTF_AFSEL_R &= 0x06; 				// disable alternate function on PF2-1
	GPIO_PORTF_DEN_R |= 0x06; 					// digital enable PF2-1
	GPIO_PORTF_PCTL_R &= ~0x00000FF0; 	// set PF2-1 as GPIO
	GPIO_PORTF_AMSEL_R &= ~0x06; 				// disable analog PF2-1
}

// Initialize Port B LEDs PB7-PB0
void PortB_LED_Init(void) { volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x00000002; 			// activate port B
	delay = SYSCTL_RCGC2_R; 						// delay
	GPIO_PORTB_DIR_R |= 0xFF; 					// set direction as INPUT PF7-0 (i.e, set DIR = 1 for an output)
	GPIO_PORTB_AFSEL_R &= ~0xFF; 				// disable alternate function on PF7-0
	GPIO_PORTB_DEN_R |= 0xFF; 					// digital enable PF7-0
	GPIO_PORTB_PCTL_R &= ~0xFFFFFFF; 		// set PF7-0 as GPIO
	GPIO_PORTB_AMSEL_R &= ~0xFF; 				// disable analog PF7-0
}


// Initialize SysTick timer for 0.1s delay with interrupt enabled
void SysTick_Init(unsigned long period) {
	NVIC_ST_CTRL_R = 0; 																							// disable Systick duyring setup
	NVIC_ST_RELOAD_R = period-1; 																			// reload value
	NVIC_ST_CURRENT_R = 0; 																						// any write to current clears it
	NVIC_SYS_PRI3_R = (NVIC_SYS_PRI3_R & 0x00FFFFFF) | 0x40000000; 		// priority 2
	NVIC_ST_CTRL_R = 0x07;
	EnableInterrupts();
}
// Initialize edge trigger interrupt for PF0 (SW2) rising edge -- CHECK, this should be falling to check for a false start
void EdgeCounter_Init() {                          
	SYSCTL_RCGC2_R |= 0x00000020;															// activate port F clock
	GPIO_PORTF_DIR_R &= ~0x01;																// make PF0 input onboard button
	GPIO_PORTF_AFSEL_R &= ~0x01;															// disable alternate function on PF0
	GPIO_PORTF_DEN_R |= 0x01;																	// enable digital I/O on PF0
	GPIO_PORTF_PCTL_R &= ~0x0000000F;													// configure PF0 as GPIO
	GPIO_PORTF_AMSEL_R = 0;																		// disable analog function on PF0
	GPIO_PORTF_PUR_R |= 0x01;																	// enable weak pullup on PF0
	
	GPIO_PORTF_IS_R &= ~0x01;																	// configure PF0 as edge sensitive
	GPIO_PORTF_IBE_R &= ~0x01;																// PF0 is not both edges
	GPIO_PORTF_IEV_R &= 0x01;																	// PF0 rising event
	GPIO_PORTF_ICR_R = 0x01;																	// clear flag 0
	GPIO_PORTF_IM_R |= 0x01;																	// arm interrupt on PF0
	NVIC_PRI7_R = (NVIC_PRI7_R & 0xFF00FFFF) | 0x00A00000; 		// priority 5
	NVIC_EN0_R = 0x40000000;																	// enable interrupt 30 in NVIC
	EnableInterrupts();																				// clears I bit
}
// Handle GPIO Port F interrupts. When Port F interrupt triggers, do what's necessary then increment global variable RisingEdges
// when the interrupt happens BEFORE _go_ state, switch states to _falseSL_ and _falseSR_ and _falseBoth_
void GPIOPortF_Handler() {
	GPIO_PORTF_ICR_R = 0x01;	// ack flag 0
}
// Handle SysTick generated interrupts. When timer interrupt triggers, do what's necessary then toggle red and blue LEDs at the same time
void SysTick_Handler(void) {
	GPIO_PORTF_DATA_R ^= 0x02;
	GPIO_PORTF_DATA_R ^= 0x04;
}

int main(void){
	
	PortA_RESET_Init();
  PortF_SENSOR_Init();
	PortB_LED_Init();
	SysTick_Init(160000);
	EdgeCounter_Init();
	CS = initialize;
	
	// initialize LaunchPad LEDs to red
	GPIO_PORTF_DATA_R = (GPIO_PORTF_DATA_R & ~0x0E) + 0x02;
	
  while(1){
		// do stuff here
		WaitForInterrupt();
  }
}

// Color    LED(s) PortF
// red      R--    0x02
// blue     --B    0x04
// green    -G-    0x08